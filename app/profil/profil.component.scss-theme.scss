@import '~@angular/material/theming';

@mixin tile-theme($theme, $background, $color-text) {
    $accent: map-get($theme, accent);
    $primary: map-get($theme, primary);
    $warn: map-get($theme, warn);
    $back: map-get($theme, background);
    $background-color: mat-color($back, card);
    $background-color-primary: mat-color($primary, darker, 1);
    $background-color-accent: mat-color($accent, 900, 0.2);
    $background-color-warn: mat-color($warn, 500);


    .profil {
        padding: 90px 0 20px 0;
        height: 100%;

        .container {
            @include mat-elevation(4);
            border-radius: 4px;
            width: 70%;
            color: $color-text;
            margin: auto;
            padding: 25px;
            background-color: $background-color;
        
            .detail {
                background-color: $background-color-accent;
                padding-bottom: 3px;
                padding-top: 3px;
                @include mat-elevation(2);
            }
        }

        p {
        font-size: 16px;
        }

        .body-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 350px;
            padding: 0;
            margin: auto;
            margin-bottom: 60px;
            width: 100%;
            border-radius: 4px;
        }
        
        .container-spinner {
            position: relative;
            width: 100%;
            display: flex;
            justify-content: space-evenly;
            align-content: flex-start;
            align-items: center;
            flex-wrap: wrap;
        
            .card {
                @include mat-elevation(8);
                position: relative;
                width: 300px;
                background: $background-color;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 300px;
                border-radius: 4px;
                text-align: center;
                overflow: hidden;
                transition: 0.5s;
                cursor: pointer;
                margin-top: 30px;
        
                &:hover {
                    transform: translateY(-10px);
                    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5);
        
                    .percent .number h2 {
                        color: $color-text;
                        font-size: 60px;
        
                        span {
                            color: $color-text;
                        }
                    }
        
                    .text {
                        color: $color-text;
                        font-size: 22px;
                    }

                    circle {
                        transition: 1s;
                        stroke: $color-text;
                    }
                }
        
                &:before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: -50%;
                    width: 100%;
                    height: 100%;
                    background: rgba(255, 255, 255, 0.03);
                    pointer-events: none;
                    z-index: 1;
                }
            }
        }
        
        .percent {
            position: relative;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background: $background-color;
            z-index: 2;
        
            .number {
                position: absolute;
                top: 8px;
                left: 0;
                width: 100%;
                height: 100%;
                display: flex;
                justify-content: center;
                align-items: center;
                border-radius: 50%;
        
                h2 {
                    color: #777;
                    font-weight: 700;
                    font-size: 40px;
                    transition: 0.5s;
        
                    span {
                        font-size: 24px;
                        color: #777;
                        transition: 0.5s;
                    }
                }
            }
        }
        
        svg {
            position: relative;
            width: 150px;
            height: 150px;
            z-index: 2;
        
            circle {
                width: 100%;
                height: 100%;
                fill: none;
                stroke: #777;
                stroke-width: 10;
                stroke-linecap: round;
                transform: translate(5px, 5px);
        
                &:nth-child(2) {
                    stroke-dasharray: 440;
                    stroke-dashoffset: 440;
                }
            }
        }
        
        .text {
            position: relative;
            color: #777;
            font-weight: 700;
            margin-top: 20px;
            font-size: 18px;
            letter-spacing: 1px;
            text-transform: uppercase;
            transition: 0.5s;
        }
        
        .body-spinner:nth-child(10) .container-spinner:nth-child(1) .card svg circle:nth-child(2) {
            stroke-dashoffset: calc(440 - (440 * 90) / 100);
            stroke: $background-color-warn;
        }
        
        .body-spinner:nth-child(10) .container-spinner:nth-child(2) .card svg circle:nth-child(2) {
            stroke-dashoffset: calc(440 - (440 * 80) / 100);
            stroke: $background-color-warn;
        }
        
        .body-spinner:nth-child(10) .container-spinner:nth-child(3) .card svg circle:nth-child(2) {
            stroke-dashoffset: calc(440 - (440 * 65) / 100);
            stroke: $background-color-warn;
        }

        .body-spinner:nth-child(12) .container-spinner:nth-child(1) .card svg circle:nth-child(2),
        .body-spinner:nth-child(14) .container-spinner:nth-child(1) .card svg circle:nth-child(2) {
            stroke-dashoffset: calc(440 - (440 * 80) / 100);
            stroke: $background-color-warn;
        }
        
        .body-spinner:nth-child(12) .container-spinner:nth-child(2) .card svg circle:nth-child(2) {
            stroke-dashoffset: calc(440 - (440 * 60) / 100);
            stroke: $background-color-warn;
        }
        
        .body-spinner:nth-child(12) .container-spinner:nth-child(3) .card svg circle:nth-child(2) {
            stroke-dashoffset: calc(440 - (440 * 70) / 100);
            stroke: $background-color-warn;
        }
        
        .body-spinner:nth-child(14) .container-spinner:nth-child(2) .card svg circle:nth-child(2) {
            stroke-dashoffset: calc(440 - (440 * 50) / 100);
            stroke: $background-color-warn;
        }
    }
}

// mat-palette -> selection de la couleur 
//                      -1er param: selection d'une palette de couleur (variable qui déclare plusieurs variations et contrastes de couleur)
//                      -2eme param: selection du contraste par défaut de la palette de couleur choisie
//                      -3eme param: selection du contraste "lighter"
//                      -4eme param: selection du contraste "darker"
//                      -return: une palette de couleur

// mat-color -> selection de la couleur par rapport à une palette de couleur. (mat-palette)
//                      -1er param: return du mat-palette
//                      -2eme param: nuance de la couleur
//                      -3eme param: opacité (entre 0 et 1, 0 = transparent, 1 = opaque)
//                      -return: une couleur (rgba(255, 140, 100, 0.5), #000000, etc)

// map-get -> récupération du contenu par rapport à la clé fournie pour un objet donné
//                      -1er param: objet à traiter
//                      -2ème param: clé du contenu qu'on souhaite récupérer pour l'objet donné
//                                   Exemple: objet $theme = [accent: mat-palette($mat-indigo), primary: mat-palette($mat-pink)]
//                                            on souhaite récupérer le contenu de la clé 'accent' de l'objet '$theme', on la récupère donc comme ceci:
//                                            $maVariable: map-get($theme, accent) 
//                      -return: le contenu de la clé fournie pour l'objet donné

// @import -> import le fichier scss stipulé. Lorsqu'on importe le fichier, on importe tout le contenu scss du fichier importé à l'endroit ou l'on 
// écrit la directive @import

// @include -> import un @mixin à l'endroit ou on écrit la directive @include. Cela permet d'importer uniquement un bout de code et non pas 
// l'entiereté d'un fichier scss

// @mixin -> permet de définir un ensemble de déclaration de styles scss qui pourra être réutilisable (notamment via include). Un mixin peut prendre
// des paramètres

// @function -> à la différence d'un @mixin qui renvoit plusieurs lignes de code CSS quand on l'appelle, une fonction retourne une ou des valeurs et 
// non pas des déclarations de styles